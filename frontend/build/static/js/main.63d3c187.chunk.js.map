{"version":3,"sources":["logo.svg","api/Backend.js","components/ComicPage.jsx","components/Pager.jsx","components/ComicBook.jsx","components/ChapterSelector.jsx","components/SeriesPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","window","location","port","Backend","Series","name","id","seriesId","image","ComicPage","props","state","React","Component","Pager","ComicBook","ChapterSelector","list","chapters","this","series","setState","e","onChapterChanged","target","value","forEach","chapter","elem","MenuItem","key","push","selectedChapter","selected","Select","onChange","bind","SeriesPage","pageId","chapterId","skipNonChapter","localStorage","checked","page","Checkbox","App","getByName","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63d3c187.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// production url, this may be typically baked into configuration instead of here\r\nvar BACKEND_URL = 'http://api.comicsite.com';\r\nvar developmentMode = false;\r\nvar productionMode = true;\r\n\r\n// If in development mode, change the backend url\r\nif(window.location.port === '3000')\r\n{\r\n    BACKEND_URL = 'http://api.comicsite.com:8000'\r\n    developmentMode = true;\r\n    productionMode = false;\r\n}\r\n\r\nfunction callJSONMethod(uri, data){\r\n    return fetch(BACKEND_URL + uri, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    }).then(response => {\r\n        if(response.status === 200){\r\n            return response.json();\r\n        }else{\r\n            throw new Error(response.json());\r\n        }\r\n    })\r\n    .catch(reason => {\r\n        throw new Error(reason);\r\n    });\r\n}\r\n\r\nfunction callGETMethod(uri){\r\n    return fetch(BACKEND_URL + uri).then(response => {\r\n        if(response.status === 200){\r\n            return response.json();\r\n        }else{\r\n            throw new Error(response.json());\r\n        }\r\n    })\r\n    .catch(reason => {\r\n        throw new Error(reason);\r\n    });\r\n}\r\n\r\nexport class Series {\r\n        \r\n    // these are defined as variables so that they can be changed in one place\r\n    static SERIES () { return '/series'}; // cant do this any other way in ES6 right now\r\n    static CHAPTER () { return '/chapters'}; // cant do this any other way in ES6 right now\r\n\r\n    static async getByName(name){\r\n        // XXX MOCK\r\n        return {\r\n            id: 1,\r\n            name: 'Lonely Hooves'\r\n        };\r\n\r\n        // TODO test below\r\n        return await callGETMethod(Series.SERIES() + '/search/' + name);\r\n    }\r\n\r\n    static async chapters(seriesId){\r\n        // XXX MOCK\r\n        return [\r\n            {\r\n                id: 1,\r\n                name: 'Chapter 1',\r\n                image: 'abc'\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Chapter 2',\r\n                image: 'abc'\r\n            },\r\n            {\r\n                id: 3,\r\n                name: 'Chapter 3',\r\n                image: 'abc'\r\n            },\r\n            {\r\n                id: 4,\r\n                name: 'Chapter 4',\r\n                image: 'abc'\r\n            },\r\n        ];\r\n\r\n        // TODO test below\r\n        return await callGETMethod(Series.PREFIX() + '/' + seriesId + Series.CHAPTER() + '/list');\r\n    }\r\n\r\n}\r\n\r\n\r\nvar Backend = {\r\n    Series\r\n};\r\n\r\nexport default Backend;","import React from 'react';\r\n\r\nclass ComicPage extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        // load\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ComicPage;","import React from 'react';\r\n\r\nclass Pager extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        // load\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <a>&lt;&lt;</a>\r\n                <a>&lt;</a>\r\n                <a>&gt;</a>\r\n                <a>&gt;&gt;</a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Pager;","import React from 'react';\r\nimport ComicPage from './ComicPage';\r\nimport Pager from './Pager';\r\n\r\nclass ComicBook extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        // load\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <ComicPage />\r\n                <Pager />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ComicBook;","import React from 'react';\r\nimport Backend from '../api/Backend';\r\nimport { Select, MenuItem } from '@material-ui/core';\r\n\r\nclass ChapterSelector extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            list: []\r\n        };\r\n    }\r\n    \r\n    async componentDidMount(){\r\n        // load\r\n        const list = await Backend.Series.chapters(this.props.series.id);\r\n        this.setState({list: list});\r\n    }\r\n   \r\n    onChapterChanged(e){\r\n        this.props.onChapterChanged(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        const chapters = [];\r\n        this.state.list.forEach(chapter => {\r\n            let elem = <MenuItem key={chapter.id} value={chapter}>{chapter.name}</MenuItem>;\r\n            // set selected item\r\n            chapters.push(elem);\r\n        });\r\n        let selectedChapter = '';\r\n        if(this.props.selected){\r\n            selectedChapter = this.props.selected;\r\n        }\r\n\r\n        return (\r\n            <Select value={selectedChapter} onChange={this.onChapterChanged.bind(this)}>\r\n                {chapters}\r\n            </Select>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ChapterSelector;","import React from 'react';\r\nimport { Checkbox } from '@material-ui/core';\r\n\r\nimport ComicBook from './ComicBook';\r\nimport ChapterSelector from './ChapterSelector';\r\n\r\nclass SeriesPage extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            pageId: null,\r\n            chapterId: null,\r\n            skipNonChapter: false\r\n        };\r\n    }\r\n\r\n    async componentDidMount(){\r\n        if(localStorage['lastPage']){\r\n            this.setState({pageId: localStorage['lastPage']})\r\n        }\r\n        if(localStorage['skipNonChapter']){\r\n            this.setState({skipNonChapter: localStorage['skipNonChapter']})\r\n        }\r\n        \r\n    }\r\n\r\n    onChapterChanged(chapter){\r\n        this.setState({chapter: chapter});\r\n    }\r\n\r\n    onClickSkipNonChapter(checked){\r\n        // dunno if i need this XXX\r\n    }\r\n\r\n    onPageChanged(page){\r\n        this.setState({\r\n            chapter: page.chapter,\r\n        });\r\n        localStorage['pageId'] = page.id;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <ComicBook series={this.props.series}/>\r\n                <Checkbox\r\n                    onChange={(e) => this.setState({skipNonChapter: e.target.checked})} \r\n                    checked={this.state.skipNonChapter}/>Skip Non-Chapter pages\r\n                <ChapterSelector\r\n                    series={this.props.series}\r\n                    selected={this.state.chapter}\r\n                    onChapterChanged={this.onChapterChanged.bind(this)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SeriesPage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Backend from './api/Backend';\n\n\nimport SeriesPage from './components/SeriesPage';\n\n\n\nconst siteSeries = 'lonely-hooves';\n\n\nclass App {\n\n  constructor() {\n    this.state = {\n      series: null\n    };\n  }\n\n  async componentDidMount(){\n    const series = await Backend.Series.getByName(siteSeries);\n    this.setState({series});\n  }\n\n  render() {\n    return (\n      <Router>\n          {/* TODO Link sidebar menu (mobile-first, collapses to menu hamburger) */}\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/\">\n              <SeriesPage series={this.state.series}/>\n            </Route>\n          </Switch>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}